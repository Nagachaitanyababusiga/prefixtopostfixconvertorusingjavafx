precedence:
Higher: paranthesis : (),{},[]
        exponent    : ^
        mul and div : *,/
lower   add and sub : +,-

associativity:

The operators that have the same precedence termed as operator associativity. 
If we go from left to right, then it is known as left-associative. 
If we go from right to left, then it is known as right-associative.


Infix to postfix:

Step 1: If the scanned character is an operand, put it into postfix expression. 
Step 2: If the scanned character is an operator and operator's stack is empty, push operator into operators' stack. 
Step 3: If the operator's stack is not empty, there may be following possibilities. 
If the precedence of scanned operator is greater than the top most operator of operator's stack, push this operator into operator 's stack. 
If the precedence of scanned operator is less than the top most operator of operator's stack, pop the operators from operator's stack until we find a low precedence operator than the scanned character.
If the incoming operator has the same precedence with the top of the stack then use the associativity rules. If the associativity is from left to right then pop the top of the stack then push the incoming operator. If the associativity is from right to left then push the incoming operator.
If the scanned character is opening round bracket ( '(' ), push it into operator's stack. 
If the scanned character is closing round bracket ( ')' ), pop out operators from operator's stack until we find an opening bracket ('(' ). 
Repeat Step 1,2 and 3 till expression has character 
Step 4: Now pop out all the remaining operators from the operator's stack and push into postfix expression. 

Infix to prefix:

Step 1: First reverse the given expression 
 Step 2: If the scanned character is an operand, put it into prefix expression.
 Step 3: If the scanned character is an operator and operator's stack is empty, push operator into operators’ stack.
 Step 4: If the operator's stack is not empty, there may be following possibilities.
If the precedence of scanned operator is greater than the top most operator of operator's stack, push this operator into operator 's stack. 
If the incoming operator has the same precedence with a TOP of the stack, push the incoming operator into the stack.
If the precedence of scanned operator is less than the top most operator of operator's stack, pop the operators from operator's stack until we find a low precedence operator than the scanned character.
If the scanned character is opening round bracket ( '(' ), push it into operator's stack. 
If the scanned character is closing round bracket ( ')' ), pop out operators from operator's stack until we find an opening bracket ('(' ). 
 Repeat Step 2,3 and 4 till expression has character 
 Step 5: Now pop out all the remaining operators from the operator's stack and push into postfix expression.
Step 6: Reverse the postfix expression to get prefix expression.


Postfix to Infix:

Step 1: Start scanning from left to right
Step 2: If a character is an operand push it to Stack
Step 3: If the character is an operator
	Pop top two elements from the Stack.
    Let’s say the popped characters are operand1 and operand2. 
    operand1=stack.pop()
    operand2=stack.pop()	
	Now evaluate (operand2 operator operand1) and push the solution back to the stack.
Step 4: Step 1 and 2 will be repeated until the end has reached.
Step 5: The Result is stored at the top of the Stack, return it
Step 6: End

Prefix to Infix:

Step 1: Start scanning from right to left
Step 2: If a character is an operand push it to Stack
Step 3: If the character is an operator
	Pop top two elements from the Stack.	
    Let’s say the popped characters are operand1 and operand2. 
    operand1=stack.pop()
    operand2=stack.pop()
	Now evaluate (operand1 operator operand2) and push the solution back to the stack.
Step 4: Step 1 and 2 will be repeated until the end has reached.
Step 5: The Result is stored at the top of the Stack, return it
Step 6: End